name: Manual Testing

on:
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of test to run'
        required: true
        default: 'basic'
        type: choice
        options:
        - basic
        - build-only
        - security-scan
        - performance-test
      target_platform:
        description: 'Target platform for testing'
        required: true
        default: 'linux'
        type: choice
        options:
        - linux
        - windows
        - macos
        - all
      enable_debug:
        description: 'Enable debug output'
        required: false
        default: false
        type: boolean
      custom_args:
        description: 'Custom build arguments (optional)'
        required: false
        type: string

jobs:
  manual-test:
    runs-on: ${{ 
      inputs.target_platform == 'windows' && 'windows-latest' || 
      inputs.target_platform == 'macos' && 'macos-latest' || 
      'ubuntu-latest' 
    }}
    
    steps:
    - name: Print test information
      run: |
        echo "üß™ Manual Testing Started"
        echo "Test Type: ${{ github.event.inputs.test_type }}"
        echo "Target Platform: ${{ github.event.inputs.target_platform }}"
        echo "Debug Mode: ${{ github.event.inputs.enable_debug }}"
        echo "Custom Args: ${{ github.event.inputs.custom_args }}"
        echo "Runner OS: ${{ runner.os }}"

    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Get dependencies
      run: go mod download

    - name: Basic tests
      if: contains(inputs.test_type, 'basic')
      run: |
        echo "üîç Running basic tests..."
        go vet ssh.go
        go build -v ssh.go
        echo "‚úÖ Basic tests completed"

    - name: Build-only test
      if: contains(inputs.test_type, 'build-only')
      run: |
        echo "üèóÔ∏è Running build-only test..."
        
        if [ "${{ inputs.target_platform }}" = "all" ]; then
          echo "Building for all platforms..."
          
          # Linux
          GOOS=linux GOARCH=amd64 go build -o ssh-linux-amd64 ssh.go
          GOOS=linux GOARCH=arm64 go build -o ssh-linux-arm64 ssh.go
          
          # Windows
          GOOS=windows GOARCH=amd64 go build -o ssh-windows-amd64.exe ssh.go
          
          # macOS
          GOOS=darwin GOARCH=amd64 go build -o ssh-darwin-amd64 ssh.go
          GOOS=darwin GOARCH=arm64 go build -o ssh-darwin-arm64 ssh.go
          
          echo "üì¶ Built binaries:"
          ls -la ssh-*
        else
          go build ${{ github.event.inputs.custom_args }} -o ssh-test ssh.go
          echo "‚úÖ Single platform build completed"
        fi

    - name: Security scan
      if: contains(inputs.test_type, 'security-scan')
      run: |
        echo "üõ°Ô∏è Running security scan..."
        
        # Install gosec if not available
        if ! command -v gosec &> /dev/null; then
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        fi
        
        # Run security scan
        gosec ./... || echo "Security scan completed with warnings"
        
        echo "üîç Checking for common vulnerabilities..."
        grep -r "password" --include="*.go" . || echo "No password strings found in code"
        grep -r "token" --include="*.go" . || echo "No token strings found in code"
        
        echo "‚úÖ Security scan completed"

    - name: Performance test
      if: contains(inputs.test_type, 'performance-test')
      run: |
        echo "‚ö° Running performance test..."
        
        # Build optimized binary
        go build -ldflags="-s -w" -o ssh-perf ssh.go
        
        # Check binary size
        echo "üìè Binary size:"
        ls -lh ssh-perf
        
        # Basic performance check
        echo "üöÄ Binary info:"
        file ssh-perf
        
        echo "‚úÖ Performance test completed"

    - name: Debug information
      if: ${{ github.event.inputs.enable_debug == 'true' }}
      run: |
        echo "üêõ Debug Information"
        echo "==================="
        echo "Go version: $(go version)"
        echo "Go env:"
        go env
        echo ""
        echo "System info:"
        uname -a
        echo ""
        echo "Available disk space:"
        df -h
        echo ""
        echo "Memory info:"
        free -h || echo "Memory info not available on this OS"
        echo ""
        echo "Environment variables:"
        env | grep -E "(GO|PATH)" | sort

    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-artifacts-${{ inputs.target_platform }}-${{ inputs.test_type }}
        path: |
          ssh-*
          *.log
        retention-days: 7

  multi-platform-test:
    if: inputs.target_platform == 'all'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Print platform info
      run: |
        echo "üñ•Ô∏è Testing on: ${{ matrix.os }}"
        echo "Runner OS: ${{ runner.os }}"

    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Platform-specific build test
      run: |
        echo "üèóÔ∏è Building for ${{ runner.os }}..."
        go mod download
        go build -v ssh.go
        echo "‚úÖ Build successful on ${{ runner.os }}"

    - name: Upload platform artifacts
      uses: actions/upload-artifact@v3
      with:
        name: platform-test-${{ runner.os }}
        path: ssh*
        retention-days: 3
